[package]
name = "teliod"
version = "0.1.0"
edition = "2021"

[dependencies]
clap.workspace = true
serde = { workspace = true }
serde_json.workspace = true
tracing.workspace = true
tracing-appender.workspace = true
tracing-subscriber.workspace = true

# Used as a lightweight and safe (because a TCP server has the risk of remote code execution)
# way for the API and daemon to communicate.
# Tokio support is needed, because the daemon runs on the async runtime.
interprocess = { version = "2.2.2", features = ["tokio"] }

nix = { version = "0.29.0", features = ["signal"] }

telio = { path = "../.." }
tokio.workspace = true
signal-hook = "0.3.17"
signal-hook-tokio = { version = "0.3.1", features = ["futures-v0_3"]}
futures.workspace = true
thiserror.workspace = true
regex.workspace = true
reqwest = { version = "0.12.12", default-features = false, features = ["json", "rustls-tls"] }
uuid = { workspace = true, features = ["serde"] }
rumqttc = "0.24.0"
rustls-native-certs = "0.8"
anyhow.workspace = true
smart-default = "0.7.1"
base64 = "0.22.1"
dirs = "6.0.0"
const_format = { version = "0.2.33", optional = true }
rust-cgi = { version = "0.7.1", optional = true }

[dev-dependencies]
rand = "0.8.5"
serial_test = "3.2.0"

[features]
cgi = ["const_format", "rust-cgi"]
qnap = ["cgi"]

