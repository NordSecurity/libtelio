#!/bin/env python3

from twisted.internet import defer, reactor
from twisted.names import dns, server

KNOWN = {
    dns.AAAA: {
        b"google.com": dns.Record_AAAA(address="2a00:1450:400e:80c::200e"),
        b"www.google.com": dns.Record_AAAA(address="2a00:1450:400e:80c::200e"),
        b"error-with-noerror-return-code.com": None,
        b"api.nordvpn.com": dns.Record_AAAA(address="2001:db8:85a4::adda:edde:b"),
        b"mqtt.nordvpn.com": dns.Record_AAAA(address="2001:db8:85a4::adda:edde:a"),
    },
    dns.A: {
        b"google.com": dns.Record_A(address="142.250.179.206"),
        b"www.google.com": dns.Record_A(address="142.250.179.206"),
        b"error-with-noerror-return-code.com": None,
        b"api.nordvpn.com": dns.Record_A(address="10.0.80.86"),
        b"mqtt.nordvpn.com": dns.Record_A(address="10.0.80.85"),
    },
    dns.CNAME: {
        b"www.microsoft.com": dns.Record_CNAME(name="www.microsoft.com-c-3.edgekey.net.")
    },
    dns.PTR: {
        b"85.80.0.10.in-addr.arpa": dns.Record_PTR(name="mqtt.nordvpn.com"),
        b"86.80.0.10.in-addr.arpa": dns.Record_PTR(name="api.nordvpn.com"),
    }
}


class DNSResolver:
    def _reply(self, name, type, record):
        print(f"Resolving name: {name} => {record}")
        if record is None:
            return [], [], []
        answer = dns.RRHeader(name=name, type=type, payload=record)
        return [answer], [], []

    def query(self, query, timeout=None):
        print(f"query: {query}")
        record = KNOWN[query.type][query.name.name]
        return defer.succeed(self._reply(query.name.name, query.type, record))


if __name__ == "__main__":
    factory = server.DNSServerFactory(clients=[DNSResolver()])
    protocol = dns.DNSDatagramProtocol(controller=factory)
    reactor.listenUDP(53, protocol, interface='::')
    reactor.listenTCP(53, factory, interface='::')
    print(f"DNS server starting with known hostnames: {KNOWN}")
    reactor.run()
