version: '3.2'

services:
  base:
    image: nat-lab:base
    build:
      context: .
      args:
        LIBTELIO_ENV_SEC_CONTAINER_REGISTRY: $LIBTELIO_ENV_SEC_CONTAINER_REGISTRY
        LIBTELIO_ENV_NAT_LAB_DEPS_TAG: $LIBTELIO_ENV_NAT_LAB_DEPS_TAG
    profiles:
      - base

  # Nordlynx servers
  nlx-01: &common-nlx
    hostname: nlx-01
    privileged: true
    build:
      context: .
      args:
        LIBTELIO_ENV_SEC_CONTAINER_REGISTRY: $LIBTELIO_ENV_SEC_CONTAINER_REGISTRY
        LIBTELIO_ENV_NAT_LAB_DEPS_TAG: $LIBTELIO_ENV_NAT_LAB_DEPS_TAG
    entrypoint: /opt/bin/nordlynx
    cap_add:
      - NET_RAW
      - NET_ADMIN
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv6.conf.all.disable_ipv6=0
    networks:
      internet:
        ipv4_address: 10.0.100.51
        priority: 1000
    environment:
      CLIENT_GATEWAY_PRIMARY: none
    volumes:
      - ./:/sync
      - ../:/libtelio
    healthcheck:
      test: "ls /ready"

  ###########################################################
  #                         CLIENTS                         #
  ###########################################################
  # Clients for cone network, they'll use cone gateways
  # as their route to the open internet
  cone-client-01: &common-client
    hostname: cone-client-01
    image: nat-lab:base
    entrypoint: /opt/bin/client
    devices:
      - "/dev/net/tun"
    cap_drop:
      - ALL
    cap_add:
      - NET_RAW
      - NET_ADMIN
      - NET_BIND_SERVICE
      - SETUID
      - SETGID
    sysctls:
      # Disable return path filter. It blocks inbound traffic when using fwmark routing policy.
      # net.ipv4.conf.all.rp_filter.src_valid_mark=1 is supposed to fix this, but it doesn't
      # seem to work. So for now disable return path filter outright.
      - net.ipv4.conf.all.rp_filter=0
      - net.ipv4.conf.default.rp_filter=0
      # Enable IPv6, by default, docker has this set to '1'
      - net.ipv6.conf.all.disable_ipv6=0
      - net.ipv6.conf.default.disable_ipv6=0
      - net.ipv6.conf.all.forwarding=1
    security_opt:
      - no-new-privileges:true
    networks:
      cone-net-01:
        ipv4_address: 192.168.101.104
    # Note: in certain scenarios this port mapping can be changed as part of `./natlab.py --start`.
    # When this comment was added, the only scenario where the port mapping is changed is CI running tests
    ports: ["58001"]
    ulimits:
      core:
        soft: -1
        hard: -1
    environment:
      CLIENT_GATEWAY_PRIMARY: 192.168.101.254
    extra_hosts:
      - "photo-album:10.0.80.80"
      - "stun-01:10.0.1.1"
      - "derp-01:10.0.10.1"
      - "derp-02:10.0.10.2"
      - "derp-03:10.0.10.3"
      - "derp-00:10.0.10.245"
      - "pmtu-probe:10.0.80.84"
      - "api.nordvpn.com:10.0.80.86"
    volumes:
      - ../:/libtelio
      - ./data/teliod:/etc/teliod
      - ./data/core_api/server.pem:/etc/ssl/server_certificate/server.pem
    healthcheck:
      test: "ls /ready"
  cone-client-02:
    hostname: cone-client-02
    <<: *common-client
    networks:
      cone-net-02:
        ipv4_address: 192.168.102.54
    environment:
      CLIENT_GATEWAY_PRIMARY: 192.168.102.254
  # Client that shares two cone networks on different interfaces
  shared-client-01:
    hostname: shared-client-01
    <<: *common-client
    networks:
      cone-net-01:
        ipv4_address: 192.168.101.67
      cone-net-05:
        ipv4_address: 192.168.113.67
    environment:
      CLIENT_GATEWAY_PRIMARY: 192.168.101.254
      CLIENT_GATEWAY_SECONDARY: 192.168.113.254

  # Open internet clients used in cryptography tests
  open-internet-client-01:
    hostname: open-client-01
    <<: *common-client
    networks:
      internet:
        ipv4_address: 10.0.11.2
    environment:
      CLIENT_GATEWAY_PRIMARY: none
  open-internet-client-02:
    hostname: open-client-02
    <<: *common-client
    networks:
      internet:
        ipv4_address: 10.0.11.3
    environment:
      CLIENT_GATEWAY_PRIMARY: none
  # Open internet client used on ipv6 tests
  open-internet-client-dual-stack:
    hostname: open-client-dual-stack
    <<: *common-client
    networks:
      internet:
        ipv4_address: 10.0.11.4
        ipv6_address: 2001:db8:85a4::dead:beef:ceed
    environment:
      CLIENT_GATEWAY_PRIMARY: none
    extra_hosts:
      - "photo-album:2001:db8:85a4::adda:edde:5"
      - "derp-01:10.0.10.1"
      - "derp-02:10.0.10.2"
      - "derp-03:10.0.10.3"
      - "derp-00:10.0.10.245"

  fullcone-client-01:
    hostname: fullcone-client-01
    <<: *common-client
    networks:
      fullcone-net-01:
        ipv4_address: 192.168.109.88
    environment:
      CLIENT_GATEWAY_PRIMARY: 192.168.109.254
  fullcone-client-02:
    hostname: fullcone-client-02
    <<: *common-client
    networks:
      fullcone-net-02:
        ipv4_address: 192.168.106.88
    environment:
      CLIENT_GATEWAY_PRIMARY: 192.168.106.254

  upnp-client-01:
    hostname: upnp-client-01
    <<: *common-client
    networks:
      upnp-net-01:
        ipv4_address: 192.168.105.88
    environment:
      CLIENT_GATEWAY_PRIMARY: 192.168.105.254
  upnp-client-02:
    hostname: upnp-client-02
    <<: *common-client
    networks:
      upnp-net-02:
        ipv4_address: 192.168.112.88
    environment:
      CLIENT_GATEWAY_PRIMARY: 192.168.112.254

  symmetric-client-01:
    hostname: symmetric-client-01
    <<: *common-client
    networks:
      hsymmetric-net-01:
        ipv4_address: 192.168.103.88
    environment:
      CLIENT_GATEWAY_PRIMARY: 192.168.103.254
  symmetric-client-02:
    hostname: symmetric-client-02
    <<: *common-client
    networks:
      hsymmetric-net-02:
        ipv4_address: 192.168.104.88
    environment:
      CLIENT_GATEWAY_PRIMARY: 192.168.104.254
  internal-symmetric-client-01:
    hostname: internal-symmetric-client-01
    <<: *common-client
    environment:
      CLIENT_GATEWAY_PRIMARY: 192.168.114.254
      INTERMEDIATE_NETWORK: 192.168.103.0/24
    networks:
      hsymmetric-internal-net-01:
        ipv4_address: 192.168.114.88

  udp-block-client-01:
    hostname: udp-block-client-01
    <<: *common-client
    networks:
      udp-block-net-01:
        ipv4_address: 192.168.110.100
    environment:
      CLIENT_GATEWAY_PRIMARY: 192.168.110.254
  udp-block-client-02:
    hostname: udp-block-client-02
    <<: *common-client
    networks:
      udp-block-net-02:
        ipv4_address: 192.168.111.100
    environment:
      CLIENT_GATEWAY_PRIMARY: 192.168.111.254


  ###########################################################
  #                        GATEWAYS                         #
  ###########################################################
  # Gateways acting like VM network routers, intended to route VM traffic through
  # docker network.
  cone-gw-01: &common-gw
    hostname: cone-gw-01
    image: nat-lab:base
    entrypoint: /opt/bin/cone-gw
    cap_drop:
      - ALL
    cap_add:
      - NET_ADMIN
      - NET_RAW
    sysctls:
      - net.ipv4.ip_forward=1
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: "ls /ready"
    networks:
      internet:
        ipv4_address: 10.0.254.1
        ipv6_address: 2001:db8:85a4::1000:2541
        priority: 1000
      cone-net-01:
        ipv4_address: 192.168.101.254
        priority: 900
  cone-gw-02:
    hostname: cone-gw-02
    <<: *common-gw
    networks:
      internet:
        ipv4_address: 10.0.254.2
        priority: 1000
      cone-net-02:
        ipv4_address: 192.168.102.254
        priority: 90
  cone-gw-03:
    hostname: cone-gw-03
    <<: *common-gw
    networks:
      internet:
        ipv4_address: 10.0.254.7
        priority: 1000
      cone-net-03:
        ipv4_address: 192.168.107.254
        priority: 900
  cone-gw-04:
    hostname: cone-gw-04
    <<: *common-gw
    networks:
      internet:
        ipv4_address: 10.0.254.8
        priority: 1000
      cone-net-04:
        ipv4_address: 192.168.108.254
        priority: 900
  cone-gw-05:
    hostname: cone-gw-05
    <<: *common-gw
    networks:
      internet:
        ipv4_address: 10.0.254.13
        priority: 1000
      cone-net-05:
        ipv4_address: 192.168.113.254
        priority: 900

  fullcone-gw-01:
    hostname: fullcone-gw-01
    <<: *common-gw
    entrypoint: /opt/bin/fullcone-gw
    networks:
      internet:
        ipv4_address: 10.0.254.9
        priority: 1000
      fullcone-net-01:
        ipv4_address: 192.168.109.254
        priority: 900
  fullcone-gw-02:
    hostname: fullcone-gw-02
    <<: *common-gw
    entrypoint: /opt/bin/fullcone-gw
    networks:
      internet:
        ipv4_address: 10.0.254.6
        priority: 1000
      fullcone-net-02:
        ipv4_address: 192.168.106.254
        priority: 900

  symmetric-gw-01:
    hostname: symmetric-gw-01
    <<: *common-gw
    entrypoint: /opt/bin/symmetric-gw
    networks:
      internet:
        ipv4_address: 10.0.254.3
        priority: 1000
      hsymmetric-net-01:
        ipv4_address: 192.168.103.254
        priority: 900
  symmetric-gw-02:
    hostname: symmetric-gw-02
    <<: *common-gw
    entrypoint: /opt/bin/symmetric-gw
    networks:
      internet:
        ipv4_address: 10.0.254.4
        priority: 1000
      hsymmetric-net-02:
        ipv4_address: 192.168.104.254
        priority: 900
  internal-symmetric-gw-01:
    hostname: internal-symmetric-gw-01
    <<: *common-gw
    entrypoint: /opt/bin/internal-symmetric-gw
    environment:
      CLIENT_GATEWAY_SECONDARY: 192.168.103.254
    networks:
      hsymmetric-net-01:
        ipv4_address: 192.168.103.44
      hsymmetric-internal-net-01:
        ipv4_address: 192.168.114.254
    volumes:
      - ../:/libtelio

  upnp-gw-01:
    hostname: upnp-gw-01
    <<: *common-gw
    entrypoint: /opt/bin/upnp-gw
    networks:
      internet:
        ipv4_address: 10.0.254.5
        priority: 1000
      upnp-net-01:
        ipv4_address: 192.168.105.254
        priority: 900
  upnp-gw-02:
    hostname: upnp-gw-02
    <<: *common-gw
    entrypoint: /opt/bin/upnp-gw
    networks:
      internet:
        ipv4_address: 10.0.254.12
        priority: 1000
      upnp-net-02:
        ipv4_address: 192.168.112.254
        priority: 900

  # Gateways which block udp traffic
  udp-block-gw-01:
    hostname: udp-block-gw-01
    <<: *common-gw
    entrypoint: /opt/bin/udp-block-gw
    networks:
      internet:
        ipv4_address: 10.0.254.10
        priority: 1000
      udp-block-net-01:
        ipv4_address: 192.168.110.254
        priority: 900
  udp-block-gw-02:
    hostname: udp-block-gw-02
    <<: *common-gw
    entrypoint: /opt/bin/udp-block-gw
    networks:
      internet:
        ipv4_address: 10.0.254.11
        priority: 1000
      udp-block-net-02:
        ipv4_address: 192.168.111.254
        priority: 900


  ###########################################################
  #                       MISC SERVERS                      #
  ###########################################################
  # Three DERP servers configured to run in a cluster
  derp-01: &common-derp
    hostname: derp-01
    image: nat-lab:base
    entrypoint: /opt/bin/derp-server
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    networks:
      internet:
        ipv4_address: 10.0.10.1
    volumes:
      - ./data/nordderper/config1.yml:/etc/nordderper/config.yml
    working_dir: /etc/nordderper
    healthcheck:
      test: "curl http://localhost:8765" # Here the port comes from nat-lab/data/nordderper/config*.yml
  derp-02:
    hostname: derp-02
    <<: *common-derp
    networks:
      internet:
        ipv4_address: 10.0.10.2
    volumes:
      - ./data/nordderper/config2.yml:/etc/nordderper/config.yml
  derp-03:
    hostname: derp-03
    <<: *common-derp
    networks:
      internet:
        ipv4_address: 10.0.10.3
    volumes:
      - ./data/nordderper/config3.yml:/etc/nordderper/config.yml

  # Plain STUN server. This can be used for doing some simple testing,
  # but note that for libtelio, we are not using plaintext STUN.
  stun-01:
    hostname: stun-01
    image: nat-lab:base
    entrypoint: /opt/bin/stun-server
    cap_drop:
      - ALL
    cap_add:
      - NET_ADMIN
    security_opt:
      - no-new-privileges:true
    networks:
      internet:
        # This container requires two IP addresses to operate,
        # therefore it takes the specified IP address and an
        # IP address + 1. The logic for this is inside bin/stun-server.
        ipv4_address: 10.0.1.1
        ipv6_address: 2001:db8:85a4::deed:6
    logging:
      options:
        max-size: 50m
    healthcheck:
      test: "stunclient 10.0.1.1 3478 | grep success"

  # Two VPN servers
  vpn-01: &common-vpn
    hostname: vpn-01
    image: nat-lab:base
    entrypoint: /opt/bin/vpn-server
    cap_drop:
      - ALL
    cap_add:
      - NET_ADMIN
      - NET_RAW
    sysctls:
      - net.ipv6.conf.all.disable_ipv6=0
      - net.ipv6.conf.default.disable_ipv6=0
      - net.ipv6.conf.all.forwarding=1
      - net.ipv4.ip_forward=1
    security_opt:
      - no-new-privileges:true
    networks:
      internet:
        ipv4_address: 10.0.100.1
    environment:
      CLIENT_GATEWAY_PRIMARY: none
    volumes:
      - ../:/libtelio
  vpn-02:
    hostname: vpn-02
    <<: *common-vpn
    networks:
      internet:
        ipv4_address: 10.0.100.2

  # Just some publicly-routable service over TCP. To access
  # it just simply run `curl photo-album`
  photo-album:
    hostname: photo-album
    image: nat-lab:base
    entrypoint: "/usr/bin/python3 -m http.server --bind :: --directory /srv/www 80"
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    networks:
      internet:
        ipv4_address: 10.0.80.80
        ipv6_address: 2001:db8:85a4::adda:edde:5
    volumes:
      - type: bind
        source: ./data/photo.png
        target: /srv/www/photo.png
        read_only: true
    healthcheck:
      test: "curl http://localhost"

  # Just some publicly-routable UDP server. To access
  # it just simply run `nc -u udp-server 2000`
  udp-server:
    hostname: udp-server
    image: nat-lab:base
    entrypoint: "/usr/bin/nc -unkl46 2000"
    cap_drop:
      - ALL
    security_opt:
      - no-new-privileges:true
    networks:
      internet:
        ipv4_address: 10.0.80.81
        ipv6_address: 2001:db8:85a4::adda:edde:6
    healthcheck:
      test: "netstat -ul | grep 2000"

  dns-server-1:
    hostname: dns-server-1
    image: nat-lab:base
    entrypoint: /opt/bin/dns-server
    environment:
      PYTHONUNBUFFERED: 1
    networks:
      internet:
        ipv4_address: 10.0.80.82
        ipv6_address: 2001:db8:85a4::adda:edde:7
    healthcheck:
      test: "nslookup google.com localhost"
  dns-server-2:
    hostname: dns-server-2
    image: nat-lab:base
    entrypoint: /opt/bin/dns-server
    environment:
      PYTHONUNBUFFERED: 1
    networks:
      internet:
        ipv4_address: 10.0.80.83
        ipv6_address: 2001:db8:85a4::adda:edde:8
    healthcheck:
      test: "nslookup google.com localhost"


  # A host which drop all packets with size larger than 1300
  pmtu-probe:
    hostname: pmtu-probe
    image: nat-lab:base
    entrypoint: /opt/bin/pmtu-probe
    cap_drop:
      - ALL
    cap_add:
      - NET_RAW
      - NET_ADMIN
    security_opt:
      - no-new-privileges:true
    networks:
      internet:
        ipv4_address: 10.0.80.84
        ipv6_address: 2001:db8:85a4::adda:edde:9
    volumes:
      - ../:/libtelio
    healthcheck:
      test: "ls /ready"

  mqtt-broker:
    hostname: mqtt-broker
    image: bytebeamio/rumqttd
    entrypoint: rumqttd -c /etc/mqtt/rumqttd.toml
    networks:
      internet:
        ipv4_address: 10.0.80.85
        ipv6_address: 2001:db8:85a4::adda:edde:a
    healthcheck:
      test: ["CMD-SHELL", "netstat -tlnp | grep 8883 | grep LISTEN"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s
    volumes:
      - ./data/core_api/rumqttd.toml:/etc/mqtt/rumqttd.toml
      - ./data/core_api/server.pem:/etc/ssl/server_certificate/server.pem

  core-api:
    hostname: core-api
    image: nat-lab:base
    entrypoint: /opt/bin/core-api.py
    environment:
      PYTHONUNBUFFERED: 1
    healthcheck:
      test: "curl --cacert /etc/ssl/server_certificate/server.pem https://api.nordvpn.com/v1/health"
    networks:
      internet:
        ipv4_address: 10.0.80.86
        ipv6_address: 2001:db8:85a4::adda:edde:b
    depends_on:
      mqtt-broker:
        condition: service_healthy
    volumes:
      - ./data/core_api/server.pem:/etc/ssl/server_certificate/server.pem
    dns:
      - 10.0.80.82
      - 10.0.80.83

networks:
  # Network representing public internet,
  # various services like DERP/STUN will be hosted
  # on this network
  internet:
    enable_ipv6: true
    driver: bridge
    driver_opts:
      com.docker.network.bridge.enable_ip_masquerade: 'false'
    ipam:
      driver: default
      config:
        - subnet: 10.0.0.0/16
        - subnet: 2001:db8:85a4::/48

  # Networks for use with cone NATs.
  # Gateways on these networks must implement restricted-cone NAT.
  cone-net-01:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.101.0/24
  cone-net-02:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.102.0/24
  cone-net-03:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.107.0/24
  cone-net-04:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.108.0/24
  cone-net-05:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.113.0/24

  # Network for use with symmetric NATs.
  # Gateways on these networks must implement symmetric NAT.
  # Name starts with letter 'H' prefix because for some reason docker doesn't let name
  # to start with letter 'S'.
  hsymmetric-net-01:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.103.0/24
  hsymmetric-net-02:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.104.0/24
  hsymmetric-internal-net-01:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.114.0/24

  # Define separate network to use with full-cone NATs.
  # Gateways on these networks must implement full-cone NAT.
  fullcone-net-01:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.109.0/24
  fullcone-net-02:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.106.0/24

  upnp-net-01:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.105.0/24
  upnp-net-02:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.112.0/24

  udp-block-net-01:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.110.0/24
  udp-block-net-02:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 192.168.111.0/24
